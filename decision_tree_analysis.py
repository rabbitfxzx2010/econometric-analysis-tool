# Generated Python code that replicates your analysis results\n# This code includes all your data preprocessing and model settings\n\nimport pandas as pd\nimport numpy as np\nfrom sklearn.model_selection import train_test_split\nfrom sklearn.tree import DecisionTreeRegressor\nfrom sklearn.metrics import mean_squared_error, r2_score, mean_absolute_error\n\n# =============================================================================\n# 1. DATA LOADING AND INITIAL SETUP\n# =============================================================================\n\n# Load your dataset\ndf = pd.read_csv('test_dataset_classification.csv')\n\nprint(f'Original dataset shape: {df.shape}')\nprint(f'Original columns: {list(df.columns)}')\n\n# =============================================================================\n# 2. DATA FILTERING (Replicating your filter settings)\n# =============================================================================\n\n# Filter 1: is_urban between 1.0 and 1.0\ndf = df[(df['is_urban'] >= 1.0) & (df['is_urban'] <= 1.0)]\n\nprint(f'After filtering shape: {df.shape}')\n\n# =============================================================================\n# 4. VARIABLE DEFINITION AND PREPROCESSING\n# =============================================================================\n\n# Define your variables (matching your analysis)\nindependent_vars = ['education_High School', 'education_PhD', 'high_earner', 'hours_worked', 'income', 'experience', 'education_Master', 'age', 'education_Bachelor']\ndependent_var = 'promotion'\n\n# Extract features and target\nX = df[independent_vars].copy()\ny = df[dependent_var].copy()\n\nprint(f'Feature matrix shape: {X.shape}')\nprint(f'Target variable shape: {y.shape}')\nprint(f'Features: {list(X.columns)}')\n\n# Train-test split\nX_train, X_test, y_train, y_test = train_test_split(\n    X, y, test_size=0.2, random_state=42\n)\nprint(f'Training set: {X_train.shape[0]} samples')\nprint(f'Test set: {X_test.shape[0]} samples')\n\n# =============================================================================\n# 5. MODEL TRAINING (Replicating your exact settings)\n# =============================================================================\n\n# Decision Tree Regression (your settings)\nmodel = DecisionTreeRegressor(\n    max_depth=5,\n    min_samples_split=2,\n    min_samples_leaf=1,\n    random_state=42\n)\n\n# Train the model\nmodel.fit(X_train, y_train)\nprint('✓ Model trained successfully')\n\n# =============================================================================\n# 6. PREDICTIONS AND EVALUATION\n# =============================================================================\n\n# Make predictions\ny_train_pred = model.predict(X_train)\ny_test_pred = model.predict(X_test)\n\n# Regression metrics\ntrain_mse = mean_squared_error(y_train, y_train_pred)\ntest_mse = mean_squared_error(y_test, y_test_pred)\ntrain_r2 = r2_score(y_train, y_train_pred)\ntest_r2 = r2_score(y_test, y_test_pred)\n\nprint('=== MODEL PERFORMANCE ===') \nprint(f'Training R²: {train_r2:.4f}')\nprint(f'Test R²: {test_r2:.4f}')\nprint(f'Training RMSE: {np.sqrt(train_mse):.4f}')\nprint(f'Test RMSE: {np.sqrt(test_mse):.4f}')\n\n# =============================================================================\n# 7. FEATURE IMPORTANCE/COEFFICIENTS\n# =============================================================================\n\n# Feature importance\nfeature_importance = pd.DataFrame({\n    'feature': X.columns,\n    'importance': model.feature_importances_\n}).sort_values('importance', ascending=False)\n\nprint('\n=== FEATURE IMPORTANCE ===') \nprint(feature_importance)\n\n# =============================================================================\n# 8. SUMMARY\n# =============================================================================\n\nprint('\n' + '='*50)\nprint('ANALYSIS COMPLETE - Results match your main analysis!')\nprint('='*50)\nprint('Model: Decision Tree')\nprint('Problem Type: Regression')\nprint('Features: 9')\nprint('This code replicates all your settings and preprocessing steps.')